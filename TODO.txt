Timestamp: 2017-11-16 09:48
1.lua=>
    require:
        1>先在table package.loaded中检查模块是否已经加载过了，加载过了直接返回
        2>否则require会为该模块找一个loader,先在table package.preload中查询传入的模块名，如果找到一个函数，就以改2函数作为模块的加载器。
        3>否则require会尝试从lua文件中，或者c程序库中加载模块，如果找到了一个lua文件就loadfile,如果找到了一个c程序库就loadlib
        4>如果require有返回值，就将这个返回值存入table package.loaded中，作为同一模块的返回值
        5>loadfile 和loadlib只是加载代码并没有运行，为了运行require会以模块名作为参数调用这些代码
    元表：
        存放元方法的table
        通过元表修改一个值的行为。
    元方法：
        制定lua中行为的规则
    协程：

2.帧同步=>
    帧同步用于实现高精度打击体验(难点：反外挂，断线重连)
    cs模式
        一台游戏状态服（GSS）对应对台客户端c
        游戏状态能保证绝对的一致性，但是一台服务器可能同时服务上万个玩家，服务器压力较大。
    p2p模式
        每个客户端包含一个状态服（GSS）,各个客户端的状态服进行同步。
        p2p模式同时连接的玩家有限，所以可以进行比较精细的运算。但是随着接入用户的增加，通讯量呈指数级增长，所以会对接入数量做严格控制，适合少量同屏的竞技类游戏。
        帧同步算法主要就是为了解决p2p模式下GSS的一致性问题。实现原理是将游戏处理细化为帧，对于没帧，在同样的环境中，保证同样的输入得到同样的输出。
        实现方式大致分为三种：无主机，有主机，服务器主机
            无主机：所有GSS功能对等，改方案需要确保所有客户端都已经同步了，并且收到所有的输入。一人出问题，其他人都会等他，影响用户体验。
            有主机：随机选出一台GSS作为主机，其他GSS只与主机通讯，GSS之间不通讯。
                    好处>是游戏体验只受主机和本机状况的影响。一人出问题不会影响其他人。主机失联，也可以仲裁得出新主机。
                    缺点>该结构在客户端，很容易被串改，也就是外挂。
            服务器主机：将GSS主机放到服务器上，防止被修改，安全性高，保证玩家体验，但脱离p2p模式，对服务器负责有要求。
  状态同步=>
    客户端上传操作到服务器上，服务器收到后计算游戏行为的结果，然后以广播的方式下发游戏中的各种状态，客户端收到状态后，根据状态显示内容。

3.http=>
4.tcp=>
    连接：客户端发送连接请求报文（SYN） 
          -> 服务端接受连接后回复响应报文（ACK）并为这次连接分配资源
          -> 客户端收到响应报文（ACK）后也向服务端发送响应报文（ACK）这样TCP连接就建立了 
    断开：客户端发送关闭连接请求报文（FIN）
          -> 服务端接受关闭连接后回复响应报文（ACK）
          -> 客户端接收到响应报文（ACK）后进入FIN_WAIT状态，继续等待服务端的关闭连接报文（FIN）
          -> 服务端发送关闭连接报文（FIN）
          -> 客户端收到关闭链接报文（FIN）后知道可以关闭连接了发送响应报文（ACK）后进入TIME_WAIT状态， 服务端收到响应报文（ACK）后知道可以断开连接了，客户端等待2MSL后没有收到回复，就证明服务端已经正常关闭了，那我客户端也可以关闭连接了


Timestamp: 2017-11-07 18:11
1.迅速创建大量用户。
2.完成pachinko推荐位配置。
2.完成状态更改的广播。
Timestamp: 2017-11-02 11:33
1.module login
    SendLogin
    OnLoginRecv
Timestamp: 2017-10-26 09:31
1.将现有热更框架移植到pk上，
2.将通信都改为pbc

Timestamp: 2017-10-23 09:49
1.看lua书本。
2.assetbundle依赖打包有空弄一下。
3.写readme文档。
Timestamp: 2017-10-19 14:13
1.isLoading HotfixResource
2.isLoadAsset from assetbundle

Timestamp: 2017-10-16 19:31
ApplicationMain->ResourceManager->EnableHotfix
                                ->AssetPoolManager
                                ->HotfixManager
Timestamp: 2017-10-16 10:19
1.热更一个新的界面:PanelNew
    挂上PanelHotfix
    程序下载热更资源，
    启动热更，require 'PanelNew' //但是，我非常希望这个时候能获取PanelNew的gameobject,然而我却还没实例化上去，找不到的，可悲，，，
    初始化管理器，
    进入下一个场景,
    实例化界面prefab，TransformGameObject to Lua 


Timestamp: 2017-10-12 19:32
重新设计BundleManager
    1.Find PoolItem in [AssetPool]
        Exist:Find Asset
                Exist:Callback(Asset)
                NoExist:Find Bundle in [BundleDic]
        NoExist:Create a PoolItem

    2.Find Bundle
        Exist:  
            Loading=true ->HangUp
            Loading=false ->Load Asset ->Callback(Asset)
        NoExist:Add bundle to [BundleDic] ->Load bundle ->Load Asset ->Callback(Asset)

Timestamp: 2017-10-11 16:50
1.在原有界面，新增UI,及逻辑
    （1）创建一个原有类的同名Lua类
         用hotfix,然后从injections获取新的UI控件


2.新增一个新的界面
    创建一个Lua类

@TODO:用Statefull,解决新增函数问题

Timestamp: 2017-10-09 09:58
1.热更ui框架
Timestamp: 2017-09-25 10:11
1.登陆
2.获取pachinko data

Timestamp: 2017-09-20 09:31
1.创建pachinko服务器项目
2.创建用户表，用户数据表
3.客户端完成网络模块
3.完成一个http服务端，负责跟板子通信，
  完成一个socket服务端，负责跟客户端通信
4.http服务端根据socket服务端的get,去跟板子交互，一个板子对应一个http服务端
5.socket服务端维护相应数量的pachinko数据模型，当数据改变时广播给客户端
6.客户端根据数据模型的id,找到本地的数据模型，进行替换，并通过事件，发送出去，ui根据事件做相应的表现

7.协议：
    socketserver--->httpserver:
        req&res
            DealYdu:open close
            DealSwitch:start end
            DealLevel: 1,2,3,4,5
            DealInput: recieve input
    client--->socketserver:
        req&res
            DealSwitch:start end
            DealLevel: 1,2,3,4,5
            GetUserData: ....
            GetPachinko:pachinko data
            GetGoods:goods data
        cast
            ChangePachinkoData:state and data
            ChangePachinkoInput:input data

协议back:
    client--->socketserver:
        req&res
            DealYdu: open close
            DealSwitch: start end
            DealLevel: 1,2,3,4,5
            Register:
            Login:
            GetUserData: ....
            GetPachinko:pachinko data
            GetGoods:goods data
    client<---socketserver:
        cast
            DealInput: recieve input
            ChangePachinkoData:state and data
            ChangePachinkoInput:input data




Timestamp: 2017-09-19 17:53
1.调查帧同步和状态同步。

Timestamp: 2017-09-18 09:56
1.PanelExchagne
Timestamp: 2017-09-15 12:27
1.Cast
    CastSpawnPlayer
    CastRecyclePlayer
    CastSyncPlayerPosition
    CastSyncPlayerState

Timestamp: 2017-09-08 19:45
1.完善人物动画控制。
2.尝试有人连入，就创建响应的player。
3.同步移动位置。
4.同步人物移动动画。

Timestamp: 2017-09-08 09:31
1.整理代码。
2.创建多个player。

Timestamp: 2017-09-07 09:20
1.解决返回数据反序列化的问题。
2.成功使用sessionId。

Timestamp: 2017-08-31 16:39
1.摄像机上下视角调整。
2.摄像机缩放。

3.动画。
4.MutiPlayer
5.帧同步。
6.状态同步。

Timestamp: 2017-08-22 09:39
1.完善客户端socket,包含功能：
    心跳，
    错误信息，
    返回函数，
    多线程，

2.实现登陆，返回用户信息
    userdata:{
        "NickName"：easy,
        "Hp": 100,
        "PosX": 0,
        "PosY": 0,
        "PosZ": 0,
    }


Timestamp: 2017-08-02 21:52
Player.cs 1288行

private int _hp = 100;
public int HP
{
    get{return _hp;}
    set
    {
        _hp = value;
        控件.Text = _hp;
    }
}

Timestamp: 2017-07-31 18:17
GUIRepeatButton
GUISkillButton

GameController
PlayerManager
Player

Timestamp: 2017-07-13 14:55
1. 测试一遍排序算法。

Timestamp: 2017-06-16 11:16
1.请求超时处理。
2.新手引导修改。
3.优化内存占用。
4.匹配结束，没进战斗。
5.组队看一下。

Timestamp: 2017-06-05 16:06
1.礼包界面调整。
2.模型确认。
3.customcontroller代码整理。
4.商城p002-3替换成p002-2

Timestamp: 2017-06-01 16:18
1.物品展示框，bug.
3.商城9宫格不扣钱。
6.每日任务出现没有的情况。
7.金币上限，是多少，涉及显示长度问题。

Timestamp: 2017-05-27 09:45
1. 14-2头像没放。

Timestamp: 2017-05-25 16:31
UI3DCamera Rx 7.25

闪光皮肤框数值都没设。

1. p1001闪光皮肤没加。
2. p1001皮肤头像。
3. p0002_03皮肤头像，闪光模型，不闪光模型。
4. p0002_02皮肤头像，闪光模型。
5. p0003_02皮肤头像，闪光模型。
5. p0003_02立绘更新。
6. p0004_02皮肤头像。
7. p0005_03闪光模型，头像。
8. p0008_02,模型，头像。
9. p0008_03,模型，头像。
10. p0009_02,皮肤头像。
11. p0019_02, 皮肤模型。


Timestamp: 2017-05-23 18:37
1.时限格式。
2.护送图标替换。
3.站点图标替换。
4.壁纸屏蔽掉。
5.九宫格，说明书。
6.付费再测试。
7.EJtalkingdata 

Timestamp: 2017-05-22 19:48
1.礼包码失败判断。
2.9宫格，复位。
3.显示金币确认的时候，对应金币数，显示图片。
4.动画问题。

Timestamp: 2017-05-20 09:18
1.小游sdk，整理。
2.talkingdata
    未接入小游。
    未接入ej。
3.kupen.

Timestamp: 2017-05-15 11:05
注册登陆流程：
注册： 
1.get token->get asobimoId
2.check login

Timestamp: 2017-05-09 15:49
1.礼包。
2.充值对应平台。
3.添加board  008 013 014 019

Timestamp: 2017-05-08 09:58
1.皮肤框统一。
2.墙纸掉落显示。
3.商店提示框调整。
4.3D模型区，可能需要适配。
5.星级，灰星不要，并居中。:角色，结算。

Timestamp: 2017-04-28 19:19
SERVER_URL_PURCHASE_DETAIL_API = "china_register/register_purchase/"

Timestamp: 2017-04-26 19:51
1.皮肤更换流程要调整。
2.角色上限。
3.加上墙纸掉落显示。
4.组队，测一测。
5.商店标签加上。
6.1001board.

Timestamp: 2017-04-20 09:37
1.角色详情技能描述。
2.好友显示，分离线和在线。
3.3D模型区域可能需要适配。
4.

Timestamp: 2017-04-13 09:31
1.聊天弹窗，层级。
2.组队层级。

Timestamp: 2017-04-11 09:51
x1.排位赛头像。
x2.用户portriat位置调整。
3.组队调整。
x4.每日任务，领取按钮。
x5.结算，金币图标。
6.签到似乎有bug.
7.角色，动画调整。
8.搜索好友，搜索框的子长确定一下。
9.登陆认证卡死。unity中。
10.登陆按钮反馈。
x11.大厅名字layer调整。
12.副本UI.=>护送。
13.ScmParam 54 行，设置名字的bug。

Timestamp: 2017-04-10 10:55
1. p018_002模型没加。
2. p003是否完成，未知。
3. p004_002图片没加。
4. p004_002模型没加。
5.界面还是有bug

Timestamp: 2017-04-07 20:30
1.  3号4号board 和 cutin未添加

Timestamp: 2017-04-01 19:44
1.购买皮肤，逻辑已经写好，界面没搭。
2.充值接口没接。


Timestamp: 2017-03-27 09:34
1.rank进度条，减少动画。
2.

Timestamp: 2017-03-23 15:43
xworld Bug
1.组队匹配。
2.副本时间，错乱。
3.强退，号没了。
4.大厅名字显示。

Timestamp: 2017-03-23 10:20
1.部分旧UI没替换。
2.加载头像延迟。

3.rank减分动画。

Timestamp: 2017-03-22 10:52
1.rank等级对应不对。
2.用户信息，模型，点了战绩返回就不动了。
3.模型背景统一。
4.部分图片，精度很低，要调整。
金币，点券，头像框

Timestamp: 2017-03-21 10:55
1.字体统一。
2.头像等级。


Timestamp: 2017-03-20 09:57
1.rank图标。
2.吃狗粮时，金币不够处理。
3.rank UI替换。
4.目标等级最高时，不能吃了。
5.吃掉星级较高的要提醒。
6.副本体力图标。
7.rank界面，数值填充。


Timestamp: 2017-03-13 10:03
1.rank 结算。
2.壁纸。
3.签到特效调整。
4.进入战斗时候的等待界面。
5.rank icon换掉。

Timestamp: 2017-03-11 09:22
1.调角色界面bug.
2.更换用户界面模型。
3.签到领取特效。
4.好友界面有bug.
5.播放动画的时候，禁止触摸。
6.角色界面尽量降低事件使用。

Timestamp: 2017-03-01 13:26
1.角色壁纸。
2.播放动画的时候，禁止触摸。
3.角色锁定。
4.皮肤界面逻辑调整。

Timestamp: 2017-02-25 16:56
1.界面返回问题，有点乱。
2.播放动画的时候，禁止触摸。
3.角色锁定。
4.皮肤界面UI调整。

Timestamp: 2017-02-14 09:46
1.界面互斥
2.标签提示信息
3.聊天框提醒
4.签到
5.升级界面经验值显示，金币显示。
6.养成系统，完善金币扣除。
7.角色锁定。

Timestamp: 2016-12-01 16:37
1.去掉项目中的英文字母。
2.去掉暴露过多的角色。
3.屏蔽的功能，隐藏按钮。


Timestamp: 2016-11-11 11:32
1.about Invoke.
2.about Thread.
3.about process.

Timestamp: 2016-10-20 01:02
Project will be did:
2.photon server
3.about the cliping of unity
4.the manager about the panel has back function
5.about System.Action

New knowledge will be learned:
1.about camera of unity

Book will be red:
1.c#

Blog will be writed:
2.about the serialize
3.about the interface
4.about the difference between struct and class
